name: Build Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Clear npm cache and install dependencies
      run: |
        npm cache clean --force
        if (Test-Path "package-lock.json") { Remove-Item "package-lock.json" -Force }
        if (Test-Path "node_modules") { Remove-Item "node_modules" -Recurse -Force }
        npm install

    - name: Install Rollup Windows native dependencies
      run: |
        npm install @rollup/rollup-win32-x64-msvc --save-dev --force

    - name: Verify installation and build frontend
      run: |
        npm list @rollup/rollup-win32-x64-msvc
        npm run build

    - name: Install Tauri dependencies (Windows)
      run: |
        echo "Installing Windows dependencies..."

    - name: Build Tauri app for Windows
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-${{ github.run_number }}
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/nsis/*.exe
        retention-days: 30

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build-${{ github.run_number }}
        path: ./artifacts

    - name: List downloaded files
      run: find ./artifacts -type f

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.2.1-build.${{ github.run_number }}
        release_name: Windows Build v0.2.1-build.${{ github.run_number }}
        draft: false
        prerelease: true

    - name: Upload MSI files
      run: |
        for file in ./artifacts/src-tauri/target/release/bundle/msi/*.msi; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")&label=Windows MSI Installer"
          fi
        done
      shell: bash

    - name: Upload EXE files
      run: |
        for file in ./artifacts/src-tauri/target/release/bundle/nsis/*.exe; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")&label=Windows EXE Installer"
          fi
        done
      shell: bash
