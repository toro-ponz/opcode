name: Build Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Clear cache and install dependencies with Bun
      run: |
        if (Test-Path "bun.lockb") { Remove-Item "bun.lockb" -Force }
        if (Test-Path "node_modules") { Remove-Item "node_modules" -Recurse -Force }
        bun install

    - name: Install Rollup Windows native dependencies
      run: |
        bun add @rollup/rollup-win32-x64-msvc --dev

    - name: Fix Tauri version mismatches
      run: |
        echo "Updating Tauri dependencies to fix version mismatches..."
        
        # Update Tauri packages to compatible versions
        bun add @tauri-apps/api@~2.5.0
        bun add @tauri-apps/plugin-dialog@~2.2.0
        bun add @tauri-apps/plugin-global-shortcut@~2.2.0
        bun add @tauri-apps/plugin-shell@~2.2.0

    - name: Update Cargo.toml for version compatibility
      run: |
        $cargoToml = Get-Content "src-tauri/Cargo.toml" -Raw
        
        # Update tauri crate to match NPM version (2.5.x compatible)
        $cargoToml = $cargoToml -replace 'tauri = \{ version = "2"', 'tauri = { version = "2.5"'
        
        # Update plugin versions to match NPM versions
        $cargoToml = $cargoToml -replace 'tauri-plugin-dialog = "2"', 'tauri-plugin-dialog = "2.2"'
        $cargoToml = $cargoToml -replace 'tauri-plugin-global-shortcut = "2"', 'tauri-plugin-global-shortcut = "2.2"'
        $cargoToml = $cargoToml -replace 'tauri-plugin-shell = "2"', 'tauri-plugin-shell = "2.2"'
        
        Set-Content "src-tauri/Cargo.toml" -Value $cargoToml
        
        echo "Updated Cargo.toml:"
        Get-Content "src-tauri/Cargo.toml" | Select-String "tauri"

    - name: Check Tauri configuration
      run: |
        echo "Checking tauri.conf.json for beforeBuildCommand..."
        if (Test-Path "src-tauri/tauri.conf.json") {
          Get-Content "src-tauri/tauri.conf.json" | Select-String "beforeBuildCommand"
        }

    - name: Build frontend with Bun
      run: |
        bun run build
      env:
        NODE_OPTIONS: "--max_old_space_size=4096"

    - name: Build Tauri app for Windows
      run: bun run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUST_BACKTRACE: 1

    - name: List build artifacts
      run: |
        echo "Searching for build artifacts..."
        if (Test-Path "src-tauri\target\release\bundle") {
          Get-ChildItem -Path "src-tauri\target\release\bundle" -Recurse -File | ForEach-Object { Write-Host $_.FullName }
        } else {
          echo "Bundle directory not found, checking target directory..."
          Get-ChildItem -Path "src-tauri\target" -Recurse -Name "*.msi", "*.exe" | ForEach-Object { Write-Host $_ }
        }

    - name: Upload Windows MSI
      uses: actions/upload-artifact@v4
      with:
        name: windows-msi-${{ github.run_number }}
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/*.msi
        retention-days: 30
      if: always()

    - name: Upload Windows NSIS
      uses: actions/upload-artifact@v4
      with:
        name: windows-nsis-${{ github.run_number }}
        path: |
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/*.exe
        retention-days: 30
      if: always()

    - name: Upload Windows Portable
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable-${{ github.run_number }}
        path: |
          src-tauri/target/release/bundle/portable/*.exe
          src-tauri/target/release/opcode.exe
        retention-days: 30
      if: always()

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download MSI artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-msi-${{ github.run_number }}
        path: ./msi-artifacts
      continue-on-error: true

    - name: Download NSIS artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-nsis-${{ github.run_number }}
        path: ./nsis-artifacts
      continue-on-error: true

    - name: Download Portable artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-portable-${{ github.run_number }}
        path: ./portable-artifacts
      continue-on-error: true

    - name: List all artifacts
      run: |
        echo "MSI artifacts:"
        find ./msi-artifacts -type f 2>/dev/null || echo "No MSI artifacts found"
        echo "NSIS artifacts:"
        find ./nsis-artifacts -type f 2>/dev/null || echo "No NSIS artifacts found"
        echo "Portable artifacts:"
        find ./portable-artifacts -type f 2>/dev/null || echo "No Portable artifacts found"

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: windows-build-${{ steps.date.outputs.date }}
        release_name: Windows Build ${{ steps.date.outputs.date }}
        body: |
          自動生成されたWindows版ビルド (Bun対応版)
          
          **含まれるファイル:**
          - MSI インストーラー
          - NSIS インストーラー
          - ポータブル版実行ファイル
          
          **ビルド情報:**
          - ビルド番号: ${{ github.run_number }}
          - コミット: ${{ github.sha }}
          - 日時: ${{ steps.date.outputs.date }}
          - ビルドツール: Bun + Tauri
          
          **修正されたバージョン不一致:**
          - tauri: 2.5.x
          - tauri-plugin-dialog: 2.2.x
          - tauri-plugin-global-shortcut: 2.2.x
          - tauri-plugin-shell: 2.2.x
        draft: false
        prerelease: true

    - name: Upload artifacts to release
      run: |
        # Upload MSI files
        for file in ./msi-artifacts/*.msi; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading MSI: $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=${filename}&label=Windows MSI Installer"
          fi
        done
        
        # Upload NSIS files
        for file in ./nsis-artifacts/*.exe; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading NSIS: $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=${filename}&label=Windows NSIS Installer"
          fi
        done
        
        # Upload Portable files
        for file in ./portable-artifacts/*.exe; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading Portable: $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=${filename}&label=Windows Portable Executable"
          fi
        done
