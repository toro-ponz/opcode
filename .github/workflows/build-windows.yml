name: Build Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Clear npm cache and reinstall dependencies
      run: |
        npm cache clean --force
        if (Test-Path "package-lock.json") { Remove-Item "package-lock.json" -Force }
        if (Test-Path "node_modules") { Remove-Item "node_modules" -Recurse -Force }
        npm install --no-optional
        npm install @rollup/rollup-win32-x64-msvc --save-dev --force

    - name: Fix Tauri version mismatches
      run: |
        echo "Updating Tauri dependencies to fix version mismatches..."
        
        # Update NPM Tauri packages to match Rust crate versions
        npm install @tauri-apps/api@~2.5.0 --save
        npm install @tauri-apps/plugin-dialog@~2.2.0 --save
        npm install @tauri-apps/plugin-global-shortcut@~2.2.0 --save
        npm install @tauri-apps/plugin-shell@~2.2.0 --save
        
        # Alternatively, update Rust crates to match NPM versions
        # This approach updates the Cargo.toml to use the latest compatible versions

    - name: Update Cargo.toml for version compatibility
      run: |
        $cargoToml = Get-Content "src-tauri/Cargo.toml" -Raw
        
        # Update tauri crate to match NPM version (2.8.x compatible)
        $cargoToml = $cargoToml -replace 'tauri = \{ version = "2"', 'tauri = { version = "2.8"'
        
        # Update plugin versions to match NPM versions
        $cargoToml = $cargoToml -replace 'tauri-plugin-dialog = "2"', 'tauri-plugin-dialog = "2.4"'
        $cargoToml = $cargoToml -replace 'tauri-plugin-global-shortcut = "2"', 'tauri-plugin-global-shortcut = "2.3"'
        $cargoToml = $cargoToml -replace 'tauri-plugin-shell = "2"', 'tauri-plugin-shell = "2.3"'
        
        Set-Content "src-tauri/Cargo.toml" -Value $cargoToml
        
        echo "Updated Cargo.toml:"
        Get-Content "src-tauri/Cargo.toml" | Select-String "tauri"

    - name: Verify Tauri version compatibility
      run: |
        echo "Checking Tauri versions..."
        npm list | Select-String "@tauri-apps"
        echo "Cargo.toml Tauri dependencies:"
        Get-Content "src-tauri/Cargo.toml" | Select-String "tauri"

    - name: Build frontend
      run: |
        npm run build
      env:
        NODE_OPTIONS: "--max_old_space_size=4096"

    - name: Build Tauri app for Windows
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUST_BACKTRACE: 1

    - name: List build artifacts
      run: |
        Get-ChildItem -Path "src-tauri\target\release\bundle" -Recurse -File | ForEach-Object { Write-Host $_.FullName }

    - name: Upload Windows MSI
      uses: actions/upload-artifact@v4
      with:
        name: windows-msi-${{ github.run_number }}
        path: src-tauri/target/release/bundle/msi/*.msi
        retention-days: 30
      if: always()

    - name: Upload Windows NSIS
      uses: actions/upload-artifact@v4
      with:
        name: windows-nsis-${{ github.run_number }}
        path: src-tauri/target/release/bundle/nsis/*.exe
        retention-days: 30
      if: always()

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download MSI artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-msi-${{ github.run_number }}
        path: ./msi-artifacts

    - name: Download NSIS artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-nsis-${{ github.run_number }}
        path: ./nsis-artifacts

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: windows-build-${{ steps.date.outputs.date }}
        release_name: Windows Build ${{ steps.date.outputs.date }}
        body: |
          自動生成されたWindows版ビルド
          
          **含まれるファイル:**
          - MSI インストーラー
          - NSIS インストーラー
          
          **ビルド情報:**
          - ビルド番号: ${{ github.run_number }}
          - コミット: ${{ github.sha }}
          - 日時: ${{ steps.date.outputs.date }}
          
          **修正されたバージョン不一致:**
          - tauri: 2.8.x
          - tauri-plugin-dialog: 2.4.x
          - tauri-plugin-global-shortcut: 2.3.x
          - tauri-plugin-shell: 2.3.x
        draft: false
        prerelease: true

    - name: Upload MSI to release
      run: |
        for file in ./msi-artifacts/*.msi; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=${filename}&label=Windows MSI Installer"
          fi
        done

    - name: Upload NSIS to release
      run: |
        for file in ./nsis-artifacts/*.exe; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=${filename}&label=Windows EXE Installer"
          fi
        done
